name: CI/CD Pipeline

on:
  push:
    branches:
      - main  # Запуск workflow при пуше в ветку main

jobs:
  build:
    name: Build on Multiple OS
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]  # Поддерживаемые ОС
        python-version: [3.8, 3.9, 3.10]  # Поддерживаемые версии Python
        include:
          - os: macos-latest
            python-version: 3.9
            architecture: arm64  # Для Apple Silicon
    steps:
      # Установить код репозитория
      - name: Checkout code
        uses: actions/checkout@v4

      # Установить Python
      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      # Установить зависимости
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Проверить сборку
      - name: Verify build
        run: |
          python -m compileall .

  test:
    name: Run Unit Tests
    runs-on: ${{ matrix.os }}
    needs: build  # Выполняется после успешного завершения стадии build
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: [3.8, 3.9, 3.10]
    steps:
      # Установить код репозитория
      - name: Checkout code
        uses: actions/checkout@v4

      # Установить Python
      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      # Установить зависимости
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Запустить тесты
      - name: Run tests
        run: |
          pytest --junitxml=reports/results-${{ matrix.os }}-${{ matrix.python-version }}.xml

      # Сохранение отчёта о тестах
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.os }}-${{ matrix.python-version }}
          path: reports/results-${{ matrix.os }}-${{ matrix.python-version }}.xml

  deploy:
    name: Demonstrate Deployment
    runs-on: ubuntu-latest
    needs: test  # Выполняется после успешного завершения стадии test
    steps:
      # Установить код репозитория
      - name: Checkout code
        uses: actions/checkout@v4

      # Установить Python
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.9

      # Установить зависимости
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Запуск Flask-приложения и логирование "Hello world!"
      - name: Run Flask Application
        env:
          FLASK_APP: app.py
        run: |
          python app.py &
          sleep 5  # Дать приложению время запуститься
          curl http://127.0.0.1:3000  # Выполнить запрос к приложению
