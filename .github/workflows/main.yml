name: CI/CD Pipeline

on:
  push:
    branches:
      - main  # Запуск workflow при пуше в ветку main

jobs:
  build:
    name: Build on Multiple OS
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.8", "3.9", "3.10"]
        include:
          - os: macos-latest
            python-version: "3.9"
            architecture: arm64
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install dependencies for macOS
        if: runner.os == 'macOS'
        run: |
          brew install gettext
          brew link --force gettext

      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: "${{ matrix.python-version }}"
          architecture: ${{ matrix.architecture || 'x64' }}

      - name: Debug Python Environment
        run: |
          python --version
          pip --version

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt --verbose

      - name: Verify build
        run: |
          python -m compileall .
  test:
    name: Run Unit Tests
    runs-on: ${{ matrix.os }}
    needs: build  # Выполняется после успешного завершения стадии build
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.8", "3.9", "3.10"]  # Указаны как строки
        include:
          - os: macos-latest
            python-version: "3.9"
            architecture: arm64  # Для Apple Silicon
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Debugging Matrix Variables
        run: |
          echo "Matrix OS: ${{ matrix.os }}"
          echo "Python Version: ${{ matrix.python-version }}"
          echo "Architecture: ${{ matrix.architecture || 'default' }}"

      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: "${{ matrix.python-version }}"
          architecture: ${{ matrix.architecture || 'x64' }}
          cache: 'false'  # Отключение кеширования для избежания конфликтов

      - name: Debug Python Environment
        run: |
          python --version
          pip --version

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt --verbose

      - name: Run tests
        run: |
          pytest --junitxml=reports/results-${{ matrix.os }}-${{ matrix.python-version }}.xml

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.os }}-${{ matrix.python-version }}
          path: reports/results-${{ matrix.os }}-${{ matrix.python-version }}.xml

  deploy:
    name: Demonstrate Deployment
    runs-on: ubuntu-latest
    needs: test  # Выполняется после успешного завершения стадии test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Flask Application
        env:
          FLASK_APP: app.py
        run: |
          nohup python app.py > flask.log 2>&1 &
          sleep 5  # Дать приложению время запуститься
          RESPONSE=$(curl -s http://127.0.0.1:3000)
          echo "Flask Response: $RESPONSE"
